//Print prime factors of a given number
    // This approach will achieve O(log n) if the number is a composite one
    // Otherwise it will achieve O(n)
    public static void printPrimeFactors(int n) {
        int c = 2;
        while (n > 1) {
            if (n % c == 0) {
                System.out.print(c + " ");
                n /= c;
            }
            else c++;
        }
    }

    //Print prime factors of a given number
    //Time Complexity: O(n^(1/2) log n)
    //Since outer loop runs for sqrt(n) times and
    // for every loop we are dividing n by i which gives us logarithmic time complexity.
    public static void primeFactor(int n) {
        while (n % 2 == 0) {
            System.out.print(2 + " ");
            n /= 2;
        }
        for (int i = 3; i < Math.sqrt(n); i += 2) {
            while (n % i == 0) {
                System.out.print(i + " ");
                n /= i;
            }
        }
        if (n > 2)
            System.out.print(n);
    }
